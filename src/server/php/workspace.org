#+title: Web server backend development notebook
This literate programming document functions as a scratchpad for the database setup and PHP development. All PHP sources are tangled directly from the babel code blocks defined in this document.

* Date and time in PHP
#+begin_src php :dir /plink:pi@piserv#60127:~/src/c/ :results output text
  function makePerson($name, $age){
    $obj->name = $name;
    $obj->age = $age;
    $obj->key = spl_object_hash($obj);

    return $obj;
  }


  $people = array(
      makePerson("Bob", 20),
      makePerson("Paul", 25),
      makePerson("Gwenda", 98)
  );


  echo json_encode($people); 
#+end_src

#+RESULTS:
: [{"name":"Bob","age":20,"key":"00000000147455e2000000007525dfa9"},{"name":"Paul","age":25,"key":"00000000147455e1000000007525dfa9"},{"name":"Gwenda","age":98,"key":"00000000147455e0000000007525dfa9"}]

#+begin_src php :dir /plink:pi@piserv#60127:~/src/c/ :results output text
  $timestamp = time();
  echo "Unix timestamp: ", $timestamp;

  $date = date("Y-m-d H:i:s", $timestamp);
  echo "\nDate and time: ", $date;
#+end_src

#+RESULTS:
: Unix timestamp: 1674776783
: Date and time: 2023-01-27 10:46:23


#+begin_src php :dir /plink:pi@piserv#60127:~/src/c/ :results output text
  function test($args="hello"){
      echo $args;
  }

  test();
#+end_src

#+RESULTS:
: hello



* MySQL database scratch space
Select rows given unit and sensor
#+begin_src sql :engine mysql :dbuser utest :dir /plink:pi@piserv#60127:~/ :results output table :cache yes :exports both
  USE weather_test;
  SELECT MAX(c.timestamp), s.measurement, s.sensor, c.value
         FROM sensors s, canberra_data c
         WHERE
          s.unit='degree_c' AND
          s.sensor='MCP9808' AND
          s.id=c.sensor_id;
#+end_src

#+RESULTS[96af6f7cdc383279257de5d01b1c19f1dd505624]:
| MAX(c.timestamp) | measurement | sensor  |  value |
|------------------+-------------+---------+--------|
|       1675420021 | temperature | MCP9808 | 22.438 |

Get all most recent measurements
#+begin_src sql :engine mysql :dbuser utest :dir /plink:pi@piserv#60127:~/ :results output table :cache no :exports both
  USE weather_test;
  SELECT x.timestamp, x.sensor_id, s.measurement, s.sensor, y.value, s.unit
         FROM sensors s, (
              SELECT sensor_id, MAX(timestamp) as timestamp
              FROM canberra_data
              GROUP BY sensor_id
         ) as x
         join canberra_data y
              on x.sensor_id = y.sensor_id
              AND x.timestamp = y.timestamp
              WHERE s.id = x.sensor_id;
#+end_src

#+RESULTS[069b29575205f596a19c9387c07c4d5a65743794]:
|  timestamp | sensor_id | measurement | sensor  |     value | unit     |
|------------+-----------+-------------+---------+-----------+----------|
| 1675488301 |        10 | temperature | BME280  |     19.89 | degree_c |
| 1675488301 |        11 | pressure    | BME280  | 93453.504 | Pa       |
| 1675488301 |        12 | humidity    | BME280  |    42.197 | %        |
| 1675488301 |        13 | temperature | MCP9808 |    20.438 | degree_c |

Get all measurements between two timestamps
#+begin_src sql :engine mysql :dbuser utest :dir /plink:pi@piserv#60127:~/ :results output table :cache yes :exports both
  USE weather_test;
  SELECT c.timestamp, c.sensor_id, s.measurement, s.sensor, c.value, s.unit
         FROM canberra_data c, sensors s
         WHERE s.id = c.sensor_id
         AND c.timestamp BETWEEN 1675480322 AND 1675480622;
#+end_src

#+RESULTS[79a27193c6a5bca2c9f8e25c8d5b82a31a0b52d5]:
|  timestamp | sensor_id | measurement | sensor  |     value | unit     |
|------------+-----------+-------------+---------+-----------+----------|
| 1675480322 |        10 | temperature | BME280  |     18.94 | degree_c |
| 1675480381 |        10 | temperature | BME280  |     18.94 | degree_c |
| 1675480441 |        10 | temperature | BME280  |     18.95 | degree_c |
| 1675480501 |        10 | temperature | BME280  |     18.96 | degree_c |
| 1675480561 |        10 | temperature | BME280  |     18.96 | degree_c |
| 1675480622 |        10 | temperature | BME280  |     18.98 | degree_c |
| 1675480322 |        11 | pressure    | BME280  | 93410.723 | Pa       |
| 1675480381 |        11 | pressure    | BME280  | 93416.195 | Pa       |
| 1675480441 |        11 | pressure    | BME280  | 93414.215 | Pa       |
| 1675480501 |        11 | pressure    | BME280  | 93408.273 | Pa       |
| 1675480561 |        11 | pressure    | BME280  | 93416.484 | Pa       |
| 1675480622 |        11 | pressure    | BME280  | 93402.363 | Pa       |
| 1675480322 |        12 | humidity    | BME280  |    42.429 | %        |
| 1675480381 |        12 | humidity    | BME280  |    42.417 | %        |
| 1675480441 |        12 | humidity    | BME280  |    42.406 | %        |
| 1675480501 |        12 | humidity    | BME280  |    42.428 | %        |
| 1675480561 |        12 | humidity    | BME280  |    42.529 | %        |
| 1675480622 |        12 | humidity    | BME280  |    42.528 | %        |
| 1675480322 |        13 | temperature | MCP9808 |    19.438 | degree_c |
| 1675480381 |        13 | temperature | MCP9808 |      19.5 | degree_c |
| 1675480441 |        13 | temperature | MCP9808 |      19.5 | degree_c |
| 1675480501 |        13 | temperature | MCP9808 |      19.5 | degree_c |
| 1675480561 |        13 | temperature | MCP9808 |      19.5 | degree_c |
| 1675480622 |        13 | temperature | MCP9808 |    19.563 | degree_c |

Get maximums or minimums
#+begin_src sql :engine mysql :dbuser utest :dir /plink:pi@piserv#60127:~/ :results output table :cache no :exports both
  USE weather_test;
  SELECT y.timestamp, y.sensor_id, x.value
         FROM (
              SELECT timestamp, sensor_id, MAX(value) as value
              FROM canberra_data
              GROUP BY sensor_id
         ) as x
         join canberra_data y
              ON x.sensor_id = y.sensor_id
              AND x.value = y.value;
#+end_src

#+RESULTS[b092b5b29d72bb1eb62f051975aa4ff95516c9d7]:
|  timestamp | sensor_id |     value |
|------------+-----------+-----------|
| 1675076581 |        11 | 93751.926 |
| 1675076701 |        11 | 93751.926 |
| 1675097341 |        12 |     60.61 |
| 1675097461 |        12 |     60.61 |
| 1675232162 |        10 |     24.33 |
| 1675232162 |        13 |    25.188 |
| 1675232221 |        10 |     24.33 |
| 1675232281 |        10 |     24.33 |

Get averages between two timestamps
#+begin_src sql :engine mysql :dbuser utest :dir /plink:pi@piserv#60127:~/ :results output table :cache no :exports both
  USE weather_test;
  -- SELECT x.sensor_id, s.measurement, s.sensor, x.value
  -- FROM (
  --      SELECT sensor_id, AVG(value) as value
  --      FROM canberra_data
  --      WHERE timestamp BETWEEN 1675480322 AND 1675480622
  --      GROUP BY sensor_id
  -- ) as x
  -- join sensors s
  -- on x.sensor_id = s.id;

  SELECT c.sensor_id, s.measurement, s.sensor, AVG(value), s.unit
  FROM canberra_data c, sensors s
  WHERE timestamp BETWEEN 1675480322 AND 1675480622
  AND s.id = c.sensor_id
  GROUP BY sensor_id
#+end_src

#+RESULTS[2d13e165b50bb3a05c6abdcf933662856f0b80f6]:
| sensor_id | measurement | sensor  |         AVG(value) | unit     |
|-----------+-------------+---------+--------------------+----------|
|        10 | temperature | BME280  | 18.955000000000002 | degree_c |
|        11 | pressure    | BME280  |  93411.37550000001 | Pa       |
|        12 | humidity    | BME280  |  42.45616666666667 | %        |
|        13 | temperature | MCP9808 |  19.50016666666667 | degree_c |

Get all values for a particular ID over or under a threshold
#+begin_src sql :engine mysql :dbuser utest :dir /plink:pi@piserv#60127:~/ :results output table :cache no :exports both
  use weather_test;
  SELECT timestamp, sensor_id, value
  FROM canberra_data
  WHERE timestamp BETWEEN 1675400000 AND 1675482781
  AND sensor_id = 12
  AND value < 41.6;
#+end_src

#+RESULTS:
|  timestamp | sensor_id |  value |
|------------+-----------+--------|
| 1675420081 |        12 | 41.597 |
| 1675420141 |        12 | 41.598 |
| 1675420801 |        12 | 41.591 |
| 1675420861 |        12 | 41.579 |
| 1675420981 |        12 | 41.593 |
| 1675421042 |        12 | 41.593 |
| 1675421221 |        12 | 41.594 |
| 1675421401 |        12 | 41.584 |
| 1675421642 |        12 | 41.597 |
| 1675421881 |        12 | 41.598 |
| 1675422001 |        12 | 41.599 |
| 1675422241 |        12 | 41.589 |
| 1675422422 |        12 | 41.591 |
| 1675422781 |        12 | 41.582 |

Get maximums or minimums over a timespan
#+begin_src sql :engine mysql :dbuser utest :dir /plink:pi@piserv#60127:~/ :results output table :cache no :exports both
  USE weather_test;
  SELECT y.timestamp, y.sensor_id, s.measurement, s.sensor, x.value, s.unit
         FROM sensors s, (
              SELECT timestamp, sensor_id, MAX(value) as value
              FROM canberra_data
              WHERE timestamp BETWEEN 1675450000 AND 1675482781
              GROUP BY sensor_id
         ) as x
         join canberra_data y
         on x.value = y.value
         AND x.sensor_id = y.sensor_id
         WHERE s.id = y.sensor_id;
#+end_src

#+RESULTS:
|  timestamp | sensor_id | measurement | sensor  |     value | unit     |
|------------+-----------+-------------+---------+-----------+----------|
| 1675364401 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675391281 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675391341 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675391461 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675391582 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675391641 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675391761 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675391882 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675391941 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675392001 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675392841 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675392901 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675392961 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675393021 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675393081 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675393201 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675416721 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675482721 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675482781 |        10 | temperature | BME280  |     19.26 | degree_c |
| 1675478581 |        11 | pressure    | BME280  | 93445.223 | Pa       |
| 1675458241 |        12 | humidity    | BME280  |    43.516 | %        |
| 1675362721 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675362841 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675362902 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675362961 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675363021 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675363141 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675363321 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675363382 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675394161 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675394281 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675394341 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675394702 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675394821 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675394881 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675394941 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675395002 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675395121 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675395181 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675395241 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675395361 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675395422 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675414381 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675414681 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675414741 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675414801 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675414861 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675414921 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675414982 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675415041 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675415101 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675415161 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675415221 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675415282 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675415461 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675415521 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675482541 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675482721 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675482781 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675482841 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675482901 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675482961 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675483021 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675483081 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675483141 |        13 | temperature | MCP9808 |    19.875 | degree_c |
| 1675483201 |        13 | temperature | MCP9808 |    19.875 | degree_c |

* Database classes
#+name: weather_db
#+begin_src php :dir /plink:pi@piserv#60127:~/src/php/ :results output text :tangle weather_db.php
  <?php

  class WeatherDB {
      private $measurement_name;
      private $measurement_id;
      private $sensor_name;
      private $sensor_stmt;

      protected $mysqli;

      const user = "utest";
      const database = "weather_test";
      const host = "localhost";
      const pw = "";
      const metadata_table = "sensors";
      const data_table = "canberra_data";

      const sensor_query = "SELECT id FROM sensors WHERE measurement=? AND sensor=?";


      public function __construct(){
          $this->mysqli = new mysqli(
              self::host,
              self::user,
              self::pw,
              self::database
          );
          $this->sensor_stmt = $this->mysqli->prepare(self::sensor_query);

          if ($this->sensor_stmt){
              $this->sensor_stmt->bind_param(
                  "ss",
                  $this->measurement_name,
                  $this->sensor_name
              );
          }
      }


      public function getMeasurementID($measurement, $sensor){
          $this->measurement_name = $measurement;
          $this->sensor_name = $sensor;
          if ($this->sensor_stmt){
              $this->sensor_stmt->execute();
              $this->measurement_id = $this->sensor_stmt->get_result()->fetch_assoc()["id"];

              return $this->measurement_id;
          }
          else {
              return NULL;
          }
      }


      public function close(){
          $this->mysqli->close();
          if ($this->sensor_stmt){
              $this->sensor_stmt->close();
          }
      }    
  }


  class WriteWeatherDB extends WeatherDB {
      private $value;
      private $timestamp;
      private $data_stmt;
      private $measurement_id;
      private $query;

      const data_query = "INSERT INTO "
                       .WeatherDB::data_table
                       ." (timestamp, sensor_id, value) VALUES (?,?,?)";


      public function __construct(){
          WeatherDB::__construct();
          $this->data_stmt = $this->mysqli->prepare(self::data_query);

          if ($this->data_stmt){
              $this->data_stmt->bind_param(
                  "iid",
                  $this->timestamp,
                  $this->measurement_id,
                  $this->value
              );
          }
      }


      public function writeMeasurements($data){
          $this->timestamp = time();
          $success = (bool)$this->data_stmt;

          if ($this->data_stmt){
              foreach($data as $ID=>$value){
                  $this->measurement_id = $ID;
                  $this->value = $value;
                  $success &= $this->data_stmt->execute();
              }
          }

          return $success;
      }


      public function close(){
          if ($this->data_stmt){
              $this->data_stmt->close();
          }
          WeatherDB::close();
      }
  }


  class ReadWeatherDB extends WeatherDB {
      const sanitize = array(
          "max"=>"MAX",
          "min"=>"MIN",
          "avg"=>"AVG",
          "over"=>">",
          "under"=>"<"
      );


      public function __construct(){
          WeatherDB::__construct();
      }


      private function _queryTable($query){
          $data;
          $result = $this->mysqli->query($query);

          if ($result){
              $data = $result->fetch_all($mode = MYSQLI_ASSOC);
              $result->free_result();
          }

          return $data;
      }


      public function getLatest(){
          return $this->_queryTable(
              "SELECT x.timestamp, x.sensor_id, s.measurement, s.sensor, y.value, s.unit "
              . "FROM " . WeatherDB::metadata_table . " s, "
              . "(SELECT sensor_id, MAX(timestamp) as timestamp "
              . "FROM " . WeatherDB::data_table . " "
              . "GROUP BY sensor_id) AS x "
              . "JOIN ". WeatherDB::data_table ." y "
              . "ON x.sensor_id = y.sensor_id "
              . "AND x.timestamp = y.timestamp "
              . "WHERE s.id = x.sensor_id"
          );
      }


      public function getBetween($t1, $t2){
          /* Where t1 < t2 */

          return $this->_queryTable(
              "SELECT c.timestamp, c.sensor_id, s.measurement, s.sensor, c.value, s.unit "
              . "FROM " . WeatherDB::data_table . " c, " . WeatherDB::metadata_table . " s "
              . "WHERE s.id = c.sensor_id "
              . "AND c.timestamp BETWEEN "
              . (int)$t1 . " AND " . (int)$t2
          );
      }


      private function _queryMaxMinBetween($t1, $t2, $func){
          /* Where t1 < t2 */

          return $this->_queryTable(
              "SELECT y.timestamp, y.sensor_id, s.measurement, s.sensor, x.value, s.unit "
              . "FROM " . WeatherDB::metadata_table . " s, "
              . "(SELECT timestamp, sensor_id, " . self::sanitize[$func] . "(value) as value "
              . "FROM " . WeatherDB::data_table . " "
              . "WHERE timestamp BETWEEN "
              . (int)$t1 . " AND " . (int)$t2 . " "
              . "GROUP BY sensor_id) AS x "
              . "JOIN " . WeatherDB::data_table . " y "
              . "ON x.value = y.value "
              . "AND x.sensor_id = y.sensor_id "
              . "WHERE s.id = y.sensor_id"
          );
      }    


      private function _getMaxMinBetween($t1, $t2, $func, $period){
          $data = array();
          $min_period = 60*60*24;

          if ($period >= $min_period){
              for ($_t1=$t2; $_t1>$t1; $_t1=$_t1-$period){
                  $data = array_merge(
                      $data,
                      $this->_queryMaxMinBetween($_t1, $t2, $func)
                  );
              }
          }
          else {
              $data = $this->_queryMaxMinBetween($t1, $t2, $func);
          }

          return $data;
      }


      public function getMaxBetween($t1, $t2, $period=0){
          return $this->_getMaxMinBetween($t1, $t2, "max", $period);
      }


      public function getMinBetween($t1, $t2, $period=0){
          return $this->_getMaxMinBetween($t1, $t2, "min", $period);
      }


      public function getAverageBetween($t1, $t2){
          /* Where t1 < t2 */

          return $this->_queryTable(
              "SELECT c.sensor_id, s.measurement, s.sensor, AVG(value) as value, s.unit "
              . "FROM " . WeatherDB::data_table . " c, " . WeatherDB::metadata_table . " s "
              . "WHERE timestamp BETWEEN "
              . (int)$t1 . " AND " . (int)$t2 . " "
              . "AND s.id = c.sensor_id "
              . "GROUP BY sensor_id "
          );
      }


      private function _getOverUnder($t1, $t2, $id, $threshold, $operator){
          /* Where t1 < t2 */

          return $this->_queryTable(
              "SELECT timestamp, sensor_id, value "
              . "FROM " . WeatherDB::data_table . " "
              . "WHERE timestamp BETWEEN "
              . (int)$t1 . " AND " . (int)$t2 . " "
              . "AND sensor_id = " . (int)$id . " "
              . "AND value " . self::sanitize[$operator] . (float)$threshold
          );
      }


      public function getOver($t1, $t2, $id, $threshold){
          return $this->_getOverUnder(
              $t1, $t2, $id, $threshold, "over"
          );
      }


      public function getUnder($t1, $t2, $id, $threshold){
          return $this->_getOverUnder(
              $t1, $t2, $id, $threshold, "under"
          );
      }    
  }


  function test(){
      $r = new ReadWeatherDB();
      $latest = $r->getUnder(1675400000, 1675482781, 12, 41.6);
      echo json_encode($latest);
  };

  ?>
#+end_src

#+RESULTS:
: [{"timestamp":"1675420081","sensor_id":"12","value":"41.597"},{"timestamp":"1675420141","sensor_id":"12","value":"41.598"},{"timestamp":"1675420801","sensor_id":"12","value":"41.591"},{"timestamp":"1675420861","sensor_id":"12","value":"41.579"},{"timestamp":"1675420981","sensor_id":"12","value":"41.593"},{"timestamp":"1675421042","sensor_id":"12","value":"41.593"},{"timestamp":"1675421221","sensor_id":"12","value":"41.594"},{"timestamp":"1675421401","sensor_id":"12","value":"41.584"},{"timestamp":"1675421642","sensor_id":"12","value":"41.597"},{"timestamp":"1675421881","sensor_id":"12","value":"41.598"},{"timestamp":"1675422001","sensor_id":"12","value":"41.599"},{"timestamp":"1675422241","sensor_id":"12","value":"41.589"},{"timestamp":"1675422422","sensor_id":"12","value":"41.591"},{"timestamp":"1675422781","sensor_id":"12","value":"41.582"}] ?>

#+begin_src php :dir /plink:pi@piserv#60127:~/src/php/ :results output text
  $x = 22.4;
  echo (float)$x;
#+end_src

#+RESULTS:
: 22.4

* Weather station sensor class
#+name: weather_station
#+begin_src php :dir /plink:pi@piserv#60127:~/src/php/ :results output text :tangle weather_station.php
  <?php

  namespace station;
  require_once 'weather_db.php';
  use WriteWeatherDB;


  class WeatherStation {
      const indices = array(
          "BME280" => array(
              "temperature" => 1,
              "pressure" => 2,
              "humidity" => 3
          ),
          "MCP9808" => array(
              "temperature" => 1
          )
      );
      private $url;


      public function __construct($url){
          $this->url = $url;
      }


      public function getData(){
          $response = file_get_contents($this->url);

          return json_decode($response);
      }


      public function getMeasurements(){
          $data = $this->getData();
          $scaled_data = array();

          foreach (self::indices as $sensor=>$measurement){
              foreach ($measurement as $name=>$index){
                  $scaled_data[] = array(
                      "sensor" => $sensor,
                      "measurement" => $name,
                      "value" => round(
                          $data->$sensor[$index]->$name /
                          $data->$sensor[$index]->div,
                          3
                      )
                  );
              }
          }

          return $scaled_data;
      }
  }


  function main(){
      $db = new WriteWeatherDB("canberra_data");
      $w_station = new WeatherStation("http://192.168.1.200:1000");

      $data = $w_station->getMeasurements();
      $data_to_write = array();
      foreach ($data as $i=>$measurement){
          $data_to_write[
              $db->getMeasurementID(
                  $measurement["measurement"],
                  $measurement["sensor"]
              )
          ] = $measurement["value"];
      }

      $success = $db->writeMeasurements($data_to_write);
  }


  main();

  ?>
#+end_src

#+RESULTS:
#+begin_example
success: 1
array(4) {
  [10]=>
  float(22.07)
  [11]=>
  float(93722.469)
  [12]=>
  float(60.323)
  [13]=>
  float(22.438)
}
#+end_example

* Front controller
#+name: controller
#+begin_src php :dir /plink:pi@piserv#60127:~/src/php/ :results output text :tangle controller.php
  <?php
  namespace controller;
  require_once "weather_db.php";
  use ReadWeatherDB;


  class Controller {
      private $db;
      private $endpoint;
      private $request;

      const api_root = "sensors";


      public function __construct($uri, $request){
          $this->db = new ReadWeatherDB();
          $this->_getEndpoint($uri);
          $this->request = $request;
      }


      private function _getEndpoint($_uri){
          $uri = explode("/", $_uri);
          $key = array_search(self::api_root, $uri);

          if ($key){
              $this->endpoint = $key==(count($uri)-1) ?
                              self::api_root : $uri[$key+1];
          }
          else {
              $this->endpoint = NULL;
          }
      }


      public function processRequest(){
          switch ($this->endpoint){
          case "getLatest":
              header("HTTP/1.1 200 OK");
              echo json_encode($this->db->getLatest());
              break;

          case "getBetween":
              header("HTTP/1.1 200 OK");
              echo json_encode(
                  $this->db->getBetween(
                      (int)$this->request["t1"],
                      (int)$this->request["t2"]                    
                  )
              );
              break;

          case "getMaxBetween":
              header("HTTP/1.1 200 OK");
              echo json_encode(
                  $this->db->getMaxBetween(
                      (int)$this->request["t1"],
                      (int)$this->request["t2"],
                      (int)$this->request["period"]
                  )
              );
              break;

          case "getMinBetween":
              header("HTTP/1.1 200 OK");
              echo json_encode(
                  $this->db->getMinBetween(
                      (int)$this->request["t1"],
                      (int)$this->request["t2"],
                      (int)$this->request["period"]
                  )
              );
              break;

          case "getAvgBetween":
              header("HTTP/1.1 200 OK");
              echo json_encode(
                  $this->db->getAverageBetween(
                      (int)$this->request["t1"],
                      (int)$this->request["t2"]                    
                  )
              );
              break;

          case "getOver":
              header("HTTP/1.1 200 OK");
              echo json_encode(
                  $this->db->getOver(
                      (int)$this->request["t1"],
                      (int)$this->request["t2"],
                      (int)$this->request["id"],
                      (float)$this->request["threshold"]
                  )
              );
              break;

          case "getUnder":
              header("HTTP/1.1 200 OK");
              echo json_encode(
                  $this->db->getUnder(
                      (int)$this->request["t1"],
                      (int)$this->request["t2"],
                      (int)$this->request["id"],
                      (float)$this->request["threshold"]
                  )
              );
              break;            

          default:
              header("HTTP/1.1 404 Not Found");
          }
          $this->db->close();
      }
  }


  function test(){
      $x = new Controller("hello/world", array());
  }

  ?>
#+end_src

#+RESULTS: controller

#+name: main
#+begin_src php :tangle main.php
  <?php

  namespace main;
  require_once "controller.php";
  use controller\Controller;


  $x = new Controller(
     $_SERVER["REQUEST_URI"],
     $_GET
  );
  $x->processRequest();

  ?>
#+end_src

* Tangle to server
#+begin_src php :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/php/weather_station.php :noweb yes
  <<weather_station>>
#+end_src

#+begin_src php :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/php/weather_db.php :noweb yes
  <<weather_db>>
#+end_src

#+begin_src php :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/php/controller.php :noweb yes
  <<controller>>
#+end_src

#+begin_src php :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/php/main.php :noweb yes
  <<main>>
#+end_src
