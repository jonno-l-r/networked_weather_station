#+title: Weather station server setup

* PHP and Apache
#+name: php-dockerfile
#+begin_src sh :tangle php.Dockerfile
  FROM php:8.2-apache
  RUN apt-get update && apt-get install -y cron vim iputils-ping dos2unix
  RUN docker-php-ext-install mysqli
  ADD ./crontab /etc/cron.d/crontab
  RUN dos2unix /etc/cron.d/crontab
  RUN chmod 0644 /etc/cron.d/crontab
  RUN crontab /etc/cron.d/crontab
  RUN cron

  EXPOSE 80
#+end_src

crontab file
#+name: crontab
#+begin_src sh :tangle crontab
  ,*/5 * * * * /usr/local/bin/php /var/www/html/php/weather_station.php
#+end_src

Note: Must run =printenv >> /etc/environemnt= to copy environment variables into filesystem for access by cron

* MariaDB
#+name: mariadb-dockerfile
#+begin_src sh :tangle mariadb.Dockerfile
  FROM mariadb:10.3
#+end_src

DB initialisation script
#+name: db_init
#+begin_src sql :tangle sql/init/init.sql
  USE weather;

  CREATE TABLE sensors (
         id INT NOT NULL AUTO_INCREMENT,
         measurement ENUM('temperature', 'pressure', 'humidity') NOT NULL,
         sensor VARCHAR(10) NOT NULL,
         unit ENUM('degree_c', 'Pa', '%'),

         PRIMARY KEY(id)
  );

  CREATE TABLE canberra_data (
         timestamp INT NOT NULL,
         sensor_id INT NOT NULL,
         value REAL,

         PRIMARY KEY(timestamp, sensor_id),
         CONSTRAINT FOREIGN KEY(sensor_id) REFERENCES sensors(id)
         ON UPDATE CASCADE ON DELETE NO ACTION
  );

  INSERT INTO sensors VALUES (10, 'temperature', 'BME280', 'degree_c');
  INSERT INTO sensors VALUES (11, 'pressure', 'BME280', 'Pa');
  INSERT INTO sensors VALUES (12, 'humidity', 'BME280', '%');
  INSERT INTO sensors VALUES (13, 'temperature', 'MCP9808', 'degree_c');

  GRANT select,insert ON weather_test.* TO 'utest';
  FLUSH PRIVILEGES;
#+end_src

* Compose
#+name: docker-compose
#+begin_src yaml :tangle compose.yml
  networks:
    public:
      external:
        name: frontend
    private:
  services:
    weather:
      build:
        context: ./
        dockerfile: "php.Dockerfile"
      restart: "always"
      ports:
        - "1000:1000"
      volumes:
        - type: bind
          source: ./web
          target: /var/www/html
        - type: bind
          source: ./log
          target: /var/log/apache2
      networks:
        - public
        - private
      environment:
        - MARIADB_USER=${MARIADB_USER:-utest}
        - MARIADB_PASSWORD=${MARIADB_PASSWORD:-utest}
        - MARIADB_DATABASE=weather
        - WEATHER_STATION_ADDRESS=http://192.168.1.200:1000
        - TZ=Australia/Canberra
    db:
      build:
        context: ./
        dockerfile: mariadb.Dockerfile
      environment:
        - MARIADB_ROOT_PASSWORD=root
        - MARIADB_USER=${MARIADB_USER:-utest}
        - MARIADB_PASSWORD=${MARIADB_PASSWORD:-utest}
        - MARIADB_DATABASE=weather
        - TZ=Australia/Canberra
      volumes:
        - type: bind
          source: ./sql/db
          target: /var/lib/mysql
        - type: bind
          source: ./sql/init
          target: /docker-entrypoint-initdb.d
      networks:
        - private
#+end_src

* Tangle to remote
#+begin_src yaml :noweb yes :tangle /plink:pi@piserv:/home/pi/docker/weather/compose.yml
  <<docker-compose>>
#+end_src

