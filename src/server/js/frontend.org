#+title: Weather station web page development notebook

* D3
#+name: plot
#+begin_src js :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/js/plot.js
  function plotLine(data, id, x_key, y_key, {
      margin_top = 50,
      margin_bottom = 50,
      margin_right = 20,
      margin_left = 50,
      width = 800,
      height = 400,
      x_domain,
      y_domain,
      y_label,
      x_label,
      line_width = 1.5,
      x_type = d3.scaleLinear,
      y_type = d3.scaleLinear
  } = {}){
      let x = data.map(i => i[x_key]*1000);
      let y = data.map(i => i[y_key]);
      const I = d3.range(x.length);

      let x_range = [margin_left, width-margin_right];
      let y_range = [margin_top, height-margin_bottom];
      x_domain = (x_domain===undefined) ? d3.extent(x) : x_domain;
      y_domain = (y_domain===undefined) ? d3.extent(y).reverse() : y_domain;
      const x_scale = x_type(x_domain, x_range);
      const y_scale = y_type(y_domain, y_range);

      const x_axis = d3.axisBottom(x_scale)
            .ticks(width/60)
            .tickSizeOuter(0);
      const y_axis = d3.axisLeft(y_scale)
            .ticks(height/80);

      const line = d3.line()
            .curve(d3.curveLinear)
            .x(i => x_scale(x[i]))
            .y(i => y_scale(y[i]));

      let svg = d3.select('#'+id)
          .attr("width", width)
          .attr("height", height);

      svg.selectAll('path').remove();
      svg.selectAll('g').remove();

      svg.append("g")
          .attr("transform", `translate(0, ${height - margin_bottom})`)
          .call(x_axis)
          .call(
              g => g.append("text")
                  .attr("y", margin_bottom-10)
                  .attr("x", width/2)
                  .attr("text-anchor", "start")
                  .attr("fill", "currentColor")
                  .text(x_label)
          );


      svg.append("g")
          .attr("transform", `translate(${margin_left}, 0)`)
          .call(y_axis)
          .call(
              g => g.selectAll(".tick line").clone()
                  .attr("x2", width - margin_left - margin_right)
                  .attr("stroke-opacity", 0.1)
          )
          .call(
              g => g.append("text")
                  .attr("x", -margin_left)
                  .attr("y", margin_top-10)
                  .attr("text-anchor", "start")
                  .attr("fill", "currentColor")
                  .text(y_label)
          );

      svg.append("path")
          .attr("fill", "none")
          .attr("stroke", "red")
          .attr("stroke-width", line_width)
          .attr("stroke-linecap", "round")
          .attr("stroke-linejoin", "round")
          .attr("d", line(I));
  }

#+end_src

* COMMENT Main
#+name: request
#+begin_src js :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/js/request.js
  function request(url, method, data = {}){
      let params = "/?";
      for (let key in data){
          params = params +
              key + "=" + data[key] + "&";
      }
      url = url + params;
      console.log(url);

      return new Promise(
          (resolve, reject) => {
              const h = new XMLHttpRequest();
              h.open(method, url, true);
              h.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
              h.onload = function() {
                  if (h.status >= 200 && h.status < 300){
                      resolve(
                          JSON.parse(this.responseText)
                      );
                  }
                  else {
                      reject(h.status);
                  }
              };
              h.send();
          });
  }
#+end_src


#+name: make_table
#+begin_src js :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/js/make_table.js
  const API_ROOT = "../php/main.php/sensors/";
  const UNIT_MAP = {
      "degree_c": '\u2103',
      "%": "%",
      "Pa": "Pa"
  };
  const SENSOR_WHITELIST = [
      "11",
      "12",
      "13"
  ];


  function getDateString(timestamp_secs){
      return (
          new Date(timestamp_secs*1000)
      ).toLocaleString();
  }


  function getLastMidnight(){
      let d = new Date();
      return (
          new Date(
              d.getFullYear(),
              d.getMonth(),
              d.getDate(),
              0, 0, 0)
      ).valueOf() / 1000;
  }


  function unique(data){
      let ids = {};
      temp = data.filter(
          (d) => {
              if (d.sensor_id in ids){
                  return false;
              }
              else {
                  ids[d.sensor_id] = true;
                  return true;
              }
          }
      );
      console.log(ids);
      return temp;
  }


  function makeColumn(data, name){
      let label = document.createElement("th");
      label.appendChild(
          document.createTextNode(name)
      );
      document.getElementById("labels").appendChild(label);

      for (sensor of data){
          if (SENSOR_WHITELIST.includes(sensor.sensor_id)) {
              let row = document.getElementById(sensor.measurement);
              let data_cell = document.createElement("td");

              data_cell.appendChild(
                  document.createTextNode(
                      `${sensor.value} ${UNIT_MAP[sensor.unit]}`
                  )
              );

              row.appendChild(data_cell);
          }
      }
  }


  // Get latest conditions and populate
  // summary table
  request(API_ROOT+"getLatest", "GET").then(
      (data) => {
          let date = document.getElementById("timestamp");
          date.appendChild(
              document.createTextNode(
                  getDateString(data[0].timestamp)
              )
          );

          makeColumn(data, "Current");
      }
  );


  // Get today's maximum,
  // so far
  var data = {
      "t2": Date.now()/1000,
      "t1": getLastMidnight()
  };
  request(API_ROOT+"getMaxBetween", "GET", data=data).then(
      (data) => {
          makeColumn(
              unique(data),
              "Maximum"
          );
      }
  );


  // Get today's minimum,
  // so far
  request(API_ROOT+"getMinBetween", "GET", data=data).then(
      (data) => {
          makeColumn(
              unique(data),
              "Minimum"
          );
      }
  );
#+end_src


#+name: make_plot
#+begin_src js :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/js/make_plot.js
  function makePlot(range){
      data = {
          "t2": Date.now()/1000,
          "t1": (Date.now()/1000) - 60*60*range
      };
      request(API_ROOT+"getBetween", "GET", data).then(
          (data) => {
              plotLine(
                  data.filter(d => d.sensor_id==13),
                  "plot_temperature",
                  "timestamp",
                  "value",
                  {
                      x_type: d3.scaleTime,
                      y_label: UNIT_MAP["degree_c"],
                      x_label: "Time"
                  }
              );

              plotLine(
                  data.filter(d => d.sensor_id==11),
                  "plot_pressure",
                  "timestamp",
                  "value",
                  {
                      x_type: d3.scaleTime,
                      y_label: UNIT_MAP["Pa"],
                      x_label: "Time"
                  }
              );

              plotLine(
                  data.filter(d => d.sensor_id==12),
                  "plot_humidity",
                  "timestamp",
                  "value",
                  {
                      x_type: d3.scaleTime,
                      y_label: UNIT_MAP["%"],
                      x_label: "Time"
                  }
              );        
          }
      )

  }
#+end_src


#+name: control_page
#+begin_src js :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/js/control_page.js
  // Minimize / maximize display widgets
  (() => {
      const collapse = document.getElementsByClassName("collapse");

      for (let e of collapse){
          e.onclick = () => {
              let display = e.parentElement
                  .parentElement
                  .getElementsByClassName("display")[0];

              if (display.style.display == "none"){
                  display.style.display = "block";
                  e.innerText = "\u2014";
              }
              else {
                  display.style.display = "none";
                  e.innerText = "+";
              }
          }
      }
  })();


  // Plot range callbacks
  (()=>{
      const range = document.getElementById("range");

      range.onchange = () => {
          makePlot(parseInt(range.value));
      };

      makePlot(range.value);
  })();
#+end_src

* Main dashboard page
#+name: dashboard
#+begin_src html :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/html/dashboard.html
  <!DOCTYPE html>
  <html>
      <head>
          <link rel="stylesheet" type="text/css" href="../css/dashboard.css">
          <title>Weather</title>
      </head>
      <body>
          <div id="current" class="container">
              <span class="name">
                  <span class="collapse" id="collapse_plots">&#8212</span>
                  Observations
              </span>
              <div class="display">
                  <span class ="title" id="timestamp"></span>
                  <table id="_current">
                      <tr id="labels">
                          <th></th>
                      </tr>
                      <tr id="temperature">
                          <td>Temperature</td>
                      </tr>
                      <tr id="pressure">
                          <td>Pressure</td>
                      </tr>
                      <tr id="humidity">
                          <td>Humidity</td>
                      </tr>
                  </table>
              </div>
          </div>


          <div class="container">
              <span class="name">
                  <span class="collapse" id="collapse_plots">&#8212</span>
                  Recent conditions
              </span>
              <div class="display">
                  <div class="control">
                      <label for="range">Range:</label>
                      <select id = "range">
                          <option value="1">1 hour</option>
                          <option value="12">12 hours</option>
                          <option value="24">1 day</option>
                          <option value="168">1 week</option>
                      </select>
                  </div>
                  <div class="plot">
                      <span class="title">Temperature</span>
                      <svg id="plot_temperature"></svg>
                  </div>
                  <div class="plot">
                      <span class="title">Humidity</span>
                      <svg id="plot_humidity"></svg>
                  </div>
                  <div class="plot">
                      <span class="title">Pressure</span>
                      <svg id="plot_pressure"></svg>
                  </div>
              </div>
          </div>


          <script src="https://d3js.org/d3.v7.min.js"></script>
          <script type="text/javascript" src="../js/plot.js"></script>
          <script type="text/javascript" src="../js/request.js"></script>
          <script type="text/javascript" src="../js/make_table.js"></script>
          <script type="text/javascript" src="../js/make_plot.js"></script>
          <script type="text/javascript" src="../js/control_page.js"></script>
      </body>
  </html>
#+end_src

* Stylesheets
#+dashboard_style
#+begin_src css :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/css/dashboard.css
  body {
      margin-left: auto;
      margin-right: auto;
      text-align: center;
      max-width: 900px;
  }


  .container {
      display: inline-block;
      padding: 10px;
      margin-bottom: 20px;
      text-align: center;
      border: 1px solid gray;
      border-radius: 10px;
      min-width: 200px;
  }


  .plot {
      margin-bottom: 10px;
  }


  table {
      text-align: left;
      font-family: monospace;
  }


  tr {
      background: cyan;
  }


  .name {    
      display: block;
      font-family: sans-serif;
      text-align: center;
      font-size: 14pt;
      margin-bottom: 10px;
      padding-top: 5px;
      padding-bottom: 5px;
      width: 100%;
      background: #e6ffed;

  }  


  .title {
      display: block;
      text-align: center;
      font-size: 10pt;
      font-family: sans-serif;

      width: 100%;
      background: cyan;
  }


  .collapse {
      font-size: 10pt;
      display: inline-block;
      float: left;
      margin-left: 5px;
      border: 1px solid gray;
      border-radius: 4px;
      text-align: left;
      width: 20px;
      background: white;
      box-shadow: 1px 1px;
      text-align: center;
  }


  .control {
      display: block;
      margin-bottom: 5px;
      text-align: right;
  }
#+end_src
