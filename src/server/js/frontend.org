#+title: Weather station web page development notebook

* D3
#+name: plot
#+begin_src js :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/js/plot.js
  function LinePlot(
      data,
      id,
      {
          x_map = i=>{},
          y_map = i=>{},
          z_map = i=>1
      }={},
      {
          margin_top = 50,
          margin_bottom = 50,
          margin_right = 20,
          margin_left = 50,
          width = 800,
          height = 400,
          y_label,
          x_label,
          line_width = 1.5,
          line_colour = "red",
          x_type = d3.scaleLinear,
          y_type = d3.scaleLinear,
          interpolation = d3.curveNatural
      }={}
  ){
      return {
          data: data,
          div: "#"+id,

          addData: function(_data){
              this.data = this.data.concat(_data);
          },

          clearData: function(){
              this.data = [];
          },

          _mapLineColour: (typeof line_colour)==="object" ?
              ([d])=>line_colour[z_map(d)] :
              ()=>line_colour,

          _setScales: function(){
              this.svg = d3.select(this.div)
                  .attr("width", width)
                  .attr("height", height);

              this.x = this.data.map(x_map);
              this.y = this.data.map(y_map);

              let x_range = [margin_left, width-margin_right];
              let y_range = [margin_top, height-margin_bottom];

              x_domain = d3.extent(this.x);
              y_domain = d3.extent(this.y).reverse();

              this.x_scale = x_type(x_domain, x_range);
              this.y_scale = y_type(y_domain, y_range);

              this.x_axis = d3.axisBottom(this.x_scale)
                    .ticks(width/60)
                    .tickSizeOuter(0);
              this.y_axis = d3.axisLeft(this.y_scale)
                    .ticks(height/80);

              this.line = d3.line()
                    .curve(interpolation)
                    .x(d => this.x_scale(x_map(d)))
                    .y(d => this.y_scale(y_map(d)));
          },

          _drawAxis: function(){
              this.svg.selectAll('g').remove();
              this.svg.append("g")
                  .attr("transform", `translate(0, ${height - margin_bottom})`)
                  .call(this.x_axis)
                  .call(
                      g => g.append("text")
                          .attr("y", margin_bottom-10)
                          .attr("x", width/2)
                          .attr("text-anchor", "start")
                          .attr("fill", "currentColor")
                          .text(x_label)
                  );

              this.svg.append("g")
                  .attr("transform", `translate(${margin_left}, 0)`)
                  .call(this.y_axis)
                  .call(
                      g => g.selectAll(".tick line").clone()
                          .attr("x2", width - margin_left - margin_right)
                          .attr("stroke-opacity", 0.1)
                  )
                  .call(
                      g => g.append("text")
                          .attr("x", -margin_left)
                          .attr("y", margin_top-10)
                          .attr("text-anchor", "start")
                          .attr("fill", "currentColor")
                          .text(y_label)
                  );            
          },

          drawData: function(){
              this._setScales();
              this._drawAxis();

              d3.select(this.div)
                  .append("g")               
                  .selectAll("path")
                  .data([...d3.group(this.data, z_map)].map(i=>i[1]))
                  .join(
                      enter => enter
                          .append("path")
                          .attr("class", "line")
                          .transition().duration(500)
                          .attr("stroke-opacity", 1)
                          .selection(),
                      update => update,
                      exit => exit.remove()
                  )
                  .attr("d", this.line)
                  .attr("fill", "none")
                  .attr("stroke", this._mapLineColour)
                  .attr("stroke-width", line_width);
          }
      };
  }
#+end_src

* Main
#+name: request
#+begin_src js :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/js/request.js
  function request(url, method, data = {}){
      let params = "/?";
      for (let key in data){
          params = params +
              key + "=" + data[key] + "&";
      }
      url = url + params;

      return new Promise(
          (resolve, reject) => {
              const h = new XMLHttpRequest();
              h.open(method, url, true);
              h.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
              h.onload = function() {
                  if (h.status >= 200 && h.status < 300){
                      resolve(
                          JSON.parse(this.responseText)
                      );
                  }
                  else {
                      reject(h.status);
                  }
              };
              h.send();
          });
  }
#+end_src


#+name: make_table
#+begin_src js :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/js/make_table.js
  const API_ROOT = "../php/main.php/sensors/";
  const UNIT_MAP = {
      "degree_c": '\u2103',
      "%": "%",
      "Pa": "Pa"
  };
  const SENSOR_WHITELIST = [
      "11",
      "12",
      "13"
  ];


  function getDateString(timestamp_secs){
      return (
          new Date(timestamp_secs*1000)
      ).toLocaleString();
  }


  function getLastMidnight(){
      let d = new Date();
      return (
          new Date(
              d.getFullYear(),
              d.getMonth(),
              d.getDate(),
              0, 0, 0)
      ).valueOf() / 1000;
  }


  function unique(data){
      let ids = {};
      temp = data.filter(
          (d) => {
              if (d.sensor_id in ids){
                  return false;
              }
              else {
                  ids[d.sensor_id] = true;
                  return true;
              }
          }
      );
      
      return temp;
  }


  function makeColumn(data, name){
      let label = document.createElement("th");
      label.appendChild(
          document.createTextNode(name)
      );
      document.getElementById("labels").appendChild(label);

      for (sensor of data){
          if (SENSOR_WHITELIST.includes(sensor.sensor_id)) {
              let row = document.getElementById(sensor.measurement);
              let data_cell = document.createElement("td");

              data_cell.appendChild(
                  document.createTextNode(
                      `${sensor.value} ${UNIT_MAP[sensor.unit]}`
                  )
              );

              row.appendChild(data_cell);
          }
      }
  }


  // Get latest conditions and populate
  // summary table
  request(API_ROOT+"getLatest", "GET").then(
      (data) => {
          let date = document.getElementById("timestamp");
          date.appendChild(
              document.createTextNode(
                  getDateString(data[0].timestamp)
              )
          );

          makeColumn(data, "Current");
      }
  );


  // Get today's maximum,
  // so far
  var data = {
      "t2": Date.now()/1000,
      "t1": getLastMidnight()
  };
  request(API_ROOT+"getMaxBetween", "GET", data=data).then(
      (data) => {
          makeColumn(
              unique(data),
              "Maximum"
          );
      }
  );


  // Get today's minimum,
  // so far
  request(API_ROOT+"getMinBetween", "GET", data=data).then(
      (data) => {
          makeColumn(
              unique(data),
              "Minimum"
          );
      }
  );
#+end_src


#+name: make_plot
#+begin_src js :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/js/make_plot.js
  function WeatherLinePlot(
      {
          x_map = d => d.timestamp*1000,
          y_map = d => d.value,
          z_map = d => d.sensor_id,
          filter_func = (d,s) => (d.sensor_id==s),
          colour_map = "red",
          interpolation = d3.curveNatural
      } = {}
  ){
      return (data, div_id, _sensor_id, unit)=>{
          let plot = LinePlot(
              data.filter((d)=>filter_func(d,_sensor_id)),
              div_id,
              {
                  x_map: x_map,
                  y_map: y_map,
                  z_map: z_map
              },
              {
                  x_type: d3.scaleTime,
                  y_label: UNIT_MAP[unit],
                  x_label: "Time",
                  width: 500,
                  line_colour: colour_map,
                  interpolation: interpolation
              }
          );

          plot.addFilteredData = function(_data){
              plot.addData(_data.filter((d)=>filter_func(d,_sensor_id)));
          };

          return plot;
      };
  }


  function plotRawRecords(range, on_request=()=>{}){
      on_request();
    
      let data = {
          "t2": Date.now()/1000,
          "t1": (Date.now()/1000) - 60*60*range
      };

      let plotter = WeatherLinePlot();

      request(API_ROOT+"getBetween", "GET", data).then(
          (data) => {
              plotter(data, "plot_temperature", 13, "degree_c").drawData();
              plotter(data, "plot_pressure", 11, "Pa").drawData();
              plotter(data, "plot_humidity", 12, "%").drawData();
              on_request();
          }
      );
  }


  function plotMinMaxDaily(start, stop, on_request=()=>{}){
      on_request();

      let request_data = {
          "t2": stop/1000,
          "t1": start/1000,
          "period": 60*60*24
      };

      let plotter = WeatherLinePlot({
          z_map: d=>d.type,
          colour_map: {
              "min": "blue",
              "max": "red"
          },
          interpolation: d3.curveStep
      });

      let p_temp = plotter([], "plot_minmax_temperature", 13, "degree_c");
      let p_pres = plotter([], "plot_minmax_pressure", 11, "Pa");
      let p_hum = plotter([], "plot_minmax_humidity", 12, "%");

      request(API_ROOT+"getMaxBetween", "GET", request_data).then(
          (data) => {
              data.map(d => {
                  d.type = "max";
                  return d;
              });
              data.sort(
                  (a, b) => {
                      return a.timestamp - b.timestamp;
                  }
              );

              p_temp.addFilteredData(data);
              p_pres.addFilteredData(data);
              p_hum.addFilteredData(data);
              p_temp.drawData();
              p_pres.drawData();
              p_hum.drawData();
              on_request();
          }
      );

      request(API_ROOT+"getMinBetween", "GET", request_data).then(
          (data) => {
              data.map(d => {
                  d.type = "min";
                  return d;
              });
              data.sort(
                  (a, b) => {
                      return a.timestamp - b.timestamp;
                  }
              );

              p_temp.addFilteredData(data);
              p_pres.addFilteredData(data);
              p_hum.addFilteredData(data);
              p_temp.drawData();
              p_pres.drawData();
              p_hum.drawData();
              on_request();
          }
      );
  }
#+end_src


#+name: control_page
#+begin_src js :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/js/control_page.js
  // Generate callback function
  // to signal completed request
  // and update status field
  function getOnRequest(num_calls, status){
      let requests = 0;

      return ()=>{
          if (requests == num_calls){
              status.innerText = "Done";
              status.style.background = "cyan";
              requests = 0;
          }
          else {
              status.innerText = "Loading";
              status.style.background = "orange";
              ++requests;
          }
      };    
  }


  // Minimize / maximize display widgets
  (() => {
      const collapse = document.getElementsByClassName("collapse");

      for (let e of collapse){
          e.onclick = () => {
              let display = e.parentElement
                  .parentElement
                  .getElementsByClassName("display")[0];

              if (display.style.display == "none"){
                  display.style.display = "block";
                  e.innerText = "\u2014";
              }
              else {
                  display.style.display = "none";
                  e.innerText = "+";
              }
          }
      }
  })();


  // Plot range callbacks
  (()=>{
      const range = document.getElementById("range");
      const status = document.getElementById("status_raw");
      const _on_request = getOnRequest(1, status);

      range.onchange = () => {
          plotRawRecords(
              range.value,
              on_request=_on_request
          );
      };

      plotRawRecords(
          range.value,
          on_request=_on_request
      );
  })();


  // Minmax plot callbacks
  (()=>{
      const start = document.getElementById("minmax_start");
      const stop = document.getElementById("minmax_stop");
      const status = document.getElementById("status_minmax");
      const _on_request = getOnRequest(2, status);

      stop.valueAsNumber = Date.now();
      start.valueAsNumber = Date.now() - 1000*60*60*24*7;

      start.onchange = () => {
          plotMinMaxDaily(
              start.valueAsNumber,
              stop.valueAsNumber,
              on_request = _on_request
          );
      };

      stop.onchange = () => {
          plotMinMaxDaily(
              start.valueAsNumber,
              stop.valueAsNumber,
              on_request = _on_request            
          );
      };

      plotMinMaxDaily(
          start.valueAsNumber,
          stop.valueAsNumber,
          on_request = _on_request        
      );
  })();
#+end_src

* Main dashboard page
#+name: dashboard
#+begin_src html :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/html/dashboard.html
  <!DOCTYPE html>
  <html>
      <head>
          <link rel="stylesheet" type="text/css" href="../css/dashboard.css">
          <title>Weather</title>
      </head>
      <body>
          <div id="current" class="container">
              <span class="name">
                  <span class="collapse" id="collapse_plots">&#8212</span>
                  Observations
              </span>
              <div class="display">
                  <span class ="title" id="timestamp"></span>
                  <table id="_current">
                      <tr id="labels">
                          <th></th>
                      </tr>
                      <tr id="temperature">
                          <td>Temperature</td>
                      </tr>
                      <tr id="pressure">
                          <td>Pressure</td>
                      </tr>
                      <tr id="humidity">
                          <td>Humidity</td>
                      </tr>
                  </table>
              </div>
          </div>


          <div class="container">
              <span class="name">
                  <span class="collapse" id="collapse_plots">&#8212</span>
                  Recent conditions
              </span>
              <div class="display">
                  <div class="control">
                      <label for="range">Range:</label>
                      <select id = "range">
                          <option value="1">1 hour</option>
                          <option value="12">12 hours</option>
                          <option value="24">1 day</option>
                          <option value="168">1 week</option>
                      </select>
                      <span class="status" id="status_raw">Loading</span>
                  </div>
                  <div class="plot">
                      <span class="title">Temperature</span>
                      <svg id="plot_temperature"></svg>
                  </div>
                  <div class="plot">
                      <span class="title">Humidity</span>
                      <svg id="plot_humidity"></svg>
                  </div>
                  <div class="plot">
                      <span class="title">Pressure</span>
                      <svg id="plot_pressure"></svg>
                  </div>
              </div>
          </div>


          <div class="container">
              <span class="name">
                  <span class="collapse" id="collapse_minmax_plots">&#8212</span>
                  Daily minimums and maximums
              </span>
              <div class="display">
                  <div class="control">
                      <label for="minmax_start">Start:</label>
                      <input type="date" id = "minmax_start"></input>
                      <label for="minmax_stop">Stop:</label>
                      <input type="date" id = "minmax_stop"></input>
                      <span class="status" id="status_minmax">Loading</span>
                  </div>
                  <div class="plot">
                      <span class="title">Temperature</span>
                      <svg id="plot_minmax_temperature"></svg>
                  </div>
                  <div class="plot">
                      <span class="title">Humidity</span>
                      <svg id="plot_minmax_humidity"></svg>
                  </div>
                  <div class="plot">
                      <span class="title">Pressure</span>
                      <svg id="plot_minmax_pressure"></svg>
                  </div>
              </div>
          </div>        


          <script src="https://d3js.org/d3.v7.min.js"></script>
          <script type="text/javascript" src="../js/plot.js"></script>
          <script type="text/javascript" src="../js/request.js"></script>
          <script type="text/javascript" src="../js/make_table.js"></script>
          <script type="text/javascript" src="../js/make_plot.js"></script>
          <script type="text/javascript" src="../js/control_page.js"></script>
      </body>
  </html>
#+end_src

* Stylesheets
#+dashboard_style
#+begin_src css :tangle /plink:pi@piserv#60127:/var/www/html/website/apps/weather/css/dashboard.css
  body {
      margin-left: auto;
      margin-right: auto;
      text-align: center;
      max-width: 2000px;
  }


  .container {
      display: inline-block;
      padding: 10px;
      margin-bottom: 20px;
      text-align: center;
      border: 1px solid gray;
      border-radius: 10px;
      min-width: 200px;
      margin-left: 20px;
      margin-right: 20px;
  }


  .plot {
      margin-bottom: 10px;
      display: inline-block;
      background: #f0f0ff;
  }


  table {
      text-align: left;
      font-family: monospace;
      font-size: 12pt;
  }


  tr {
      background: cyan;
  }


  .name {    
      display: block;
      font-family: sans-serif;
      text-align: center;
      font-size: 14pt;
      margin-bottom: 10px;
      padding-top: 5px;
      padding-bottom: 5px;
      width: 100%;
      background: #e6ffed;

  }  


  .title {
      display: block;
      text-align: center;
      font-size: 10pt;
      font-family: sans-serif;

      width: 100%;
      background: cyan;
  }


  .collapse {
      font-size: 10pt;
      display: inline-block;
      float: left;
      margin-left: 5px;
      border: 1px solid gray;
      border-radius: 4px;
      text-align: left;
      width: 20px;
      background: white;
      box-shadow: 1px 1px;
      text-align: center;
  }


  .control {
      display: block;
      margin-bottom: 5px;
      text-align: right;
  }


  .status {
      display: inline-block;
      background: cyan;
      color: white;
      padding: 3px;
      font-family: sans-serif;
      border-radius: 5px;
      width: 60px;
      text-align: center;
  }
#+end_src
